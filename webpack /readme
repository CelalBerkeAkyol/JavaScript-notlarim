Babel, Webpack, `require`, ve modüller modern JavaScript geliştirme sürecinde önemli rol oynayan araçlar ve kavramlardır. Bunların ne olduklarını ve nasıl çalıştıklarını detaylıca açıklayarak arasındaki ilişkileri anlamaya çalışalım.

### Babel
#### Nedir?
Babel, JavaScript kodunu dönüştürmek için kullanılan bir transpilerdir. Eski tarayıcılar veya eski JavaScript motorları tarafından desteklenmeyen yeni JavaScript özelliklerini daha eski bir sürüme dönüştürür.

#### Ne İşe Yarar?
- **Kod Uyumluluğu**: ES6+ (ES2015 ve sonrası) kodlarını ES5'e dönüştürerek tüm tarayıcılarda çalışmasını sağlar.
- **Polyfill Desteği**: Yeni JavaScript özellikleri için gerekli olan polyfill'leri ekleyerek eski tarayıcılarda bu özelliklerin çalışmasını sağlar.
- **Deneysel Özellikler**: JavaScript'in henüz standartlaşmamış, deneysel özelliklerini kullanmanıza olanak tanır ve bunları desteklenen bir sürüme dönüştürür.

#### Nasıl Kullanılır?
Babel genellikle Webpack gibi bir araçla birlikte kullanılır. Babel'in kendisi bir CLI (komut satırı arayüzü) veya bir API aracılığıyla kullanılabilir. Bir `babel.config.json` dosyası ile konfigüre edilir ve hangi dosyaların nasıl dönüştürüleceği belirlenir.

### Webpack
#### Nedir?
Webpack, modern JavaScript uygulamaları için bir modül toplayıcısıdır. JavaScript, CSS, HTML ve hatta resimler gibi farklı dosya türlerini bir araya getirir ve bir veya birkaç "bundle" dosya haline getirir.

#### Ne İşe Yarar?
- **Modül Bağımlılıkları**: Uygulamanızın tüm bağımlılıklarını analiz eder ve tek bir dosya veya birkaç dosya olarak paketler.
- **Performans Optimizasyonu**: Kod bölme (code splitting), tembel yükleme (lazy loading), ve ağaç sallama (tree shaking) gibi tekniklerle performansı artırır.
- **Geliştirme Araçları**: Hot Module Replacement (HMR) gibi özelliklerle geliştirme sürecini hızlandırır.

#### Nasıl Kullanılır?
Webpack, bir konfigürasyon dosyası (`webpack.config.js`) aracılığıyla yapılandırılır. Bu dosyada, giriş (`entry`) ve çıkış (`output`) noktaları, yükleyiciler (`loaders`) ve eklentiler (`plugins`) tanımlanır.

### `require` ve Modüller
#### Nedir?
Modüler programlama, kodun tekrar kullanılabilir ve yönetilebilir parçalar halinde organize edilmesini sağlar. Node.js ve tarayıcı tarafında kullanılan iki ana modül sistemi vardır: CommonJS (`require`) ve ES6 modülleri (`import`).

- **CommonJS (`require`)**: Node.js tarafından kullanılan ve modüllerin `require` ve `module.exports` ile ithal ve ihraç edilmesini sağlayan bir modül sistemidir.
- **ES6 Modülleri (`import`/`export`)**: ES6 ile gelen ve tarayıcılar tarafından yerel olarak desteklenen modern bir modül sistemidir.

#### Ne İşe Yarar?
- **Kod Organizasyonu**: Kodun küçük, yönetilebilir ve tekrar kullanılabilir parçalara ayrılmasını sağlar.
- **Bağımlılık Yönetimi**: Farklı modüller arasındaki bağımlılıkların açık bir şekilde belirtilmesini sağlar.
- **İzolasyon**: Her modül kendi kapsamı içinde çalışır, bu da ad çakışmalarını ve global değişken kullanımını azaltır.

### Aralarındaki İlişki
- **Babel ve Modüller**: Babel, ES6 modüllerini CommonJS modüllerine dönüştürebilir veya tersi. Bu, ES6 modüllerini eski ortamlarla uyumlu hale getirir.
- **Webpack ve Modüller**: Webpack, hem CommonJS hem de ES6 modüllerini destekler ve bu modülleri bağımlılıklarına göre birleştirir.
- **Webpack ve Babel**: Webpack, Babel'i bir yükleyici (loader) olarak kullanarak JavaScript dosyalarını dönüştürebilir. Bu sayede modern JavaScript özellikleri kullanılarak yazılan kodlar eski tarayıcılarla uyumlu hale getirilir.

### Örnek Senaryo
Diyelim ki modern JavaScript özelliklerini (ES6+), SCSS ile yazılmış stilleri ve çeşitli görüntü dosyalarını içeren bir proje geliştiriyorsunuz. Bu projeyi eski tarayıcılarda çalışacak şekilde hazırlamak istiyorsunuz.

1. **Babel**: ES6+ kodlarınızı ES5'e dönüştürmek için Babel kullanırsınız.
2. **Webpack**: Tüm JavaScript, CSS ve diğer varlık dosyalarını tek bir veya birkaç bundle dosyası haline getirmek için Webpack kullanırsınız. Webpack konfigürasyon dosyanızda Babel yükleyicisini tanımlarsınız.
3. **Modüller**: Kodunuzu modüller halinde yazarsınız ve bunları `import`/`export` veya `require`/`module.exports` ile organize edersiniz. Webpack bu modülleri analiz eder ve bağımlılıklarına göre paketler.

Bu şekilde, Babel ve Webpack kullanarak modern JavaScript projelerinizi hem gelişmiş hem de eski tarayıcılarla uyumlu hale getirirsiniz.


NOT 
node_modulleri yüklemesi githuba çok zor olacağı için sildim. npm install komutu ile package.json üzerindeki dependencies otomatik olarak indirilecektir. 

Terser hatası 
 Terser tarafından sıkıştırma (minification) işlemi yapılırken oluşuyor ve kripto (crypto) modülüyle ilgili bir sorun olduğunu belirtiyor. Node.js'in yeni sürümleriyle (özellikle Node.js 17 ve üzeri) gelen bazı değişiklikler nedeniyle bu tür hatalar yaygınlaşmıştır. Bu tür bir hatayla karşılaştığınızda, genellikle Node.js sürümünüzle ilgili bir uyumsuzluk ya da yapılandırma hatası olabilir.
 Çözüm Yöntemleri
1. Node.js Sürümünü Düşürmek
Node.js'in daha stabil ve yaygın kullanılan sürümlerinden birine geri dönmek sorunu çözebilir. Örneğin, Node.js 16 LTS sürümünü kullanmak bu tür sorunları genellikle ortadan kaldırır.

Node.js 16'yı kullanmak için:
nvm install 16
nvm use 16
----
2. OpenSSL Legacy Provider Kullanmak
Node.js 17 ve üstü sürümlerle birlikte gelen bu tür hataları aşmak için OpenSSL legacy provider kullanabilirsiniz.
Aşağıdaki komutları terminalde çalıştırarak bu sağlayıcıyı etkinleştirebilirsiniz:
export NODE_OPTIONS=--openssl-legacy-provider
veya packege.json da
"scripts": {
  "build": "export NODE_OPTIONS=--openssl-legacy-provider && webpack --progress"
}

2. yöntem olan export NODE_OPTIONS=--openssl-legacy-provider terminalde çalıştırarak işi çözüm